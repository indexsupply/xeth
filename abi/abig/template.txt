{{ define "package" }}
// Code generated by "genabi"; DO NOT EDIT.
package {{ . }}
{{ end }}

{{ define "imports" }}
import (
	{{ range . -}}
	"{{ . }}"
	{{ end -}}
)
{{ end }}

{{- define "input" -}}
	abi.Input{
		{{ if eq .Indexed true -}}
		Indexed: true,
		{{ end -}}
		Name: "{{.Name}}",
		Type: "{{.Type}}",
		{{ if gt (len .Components) 0 -}}
		Components: []abi.Input{
		{{ range .Components -}}
		{{ template "input" . }}
		{{ end }}
		},
		{{ end }}
	},
{{- end -}}

{{ define "struct" -}}
	type {{camel .Name }} struct {
		Item abi.Item
		{{ range .Inputs -}}
			{{ camel .Name }} {{ goType . }}
		{{ end -}}
	}
	func New{{ camel .Name }}(item abi.Item) {{ camel .Name }} {
		x := {{ camel .Name }}{}
		{{ range $index, $inp := .Inputs -}}
			{{ if eq $inp.ABIType.Kind 2 -}}
				x.{{ camel $inp.Name }} = New{{ camel $inp.Name }}(item.At({{ $index }}))
			{{ else if eq $inp.ABIType.Kind 3 -}}
				{{ template "list" tinput $index $inp -}}
				x.{{ camel $inp.Name }} = {{ $inp.Name }}0
			{{ else -}}
				x.{{ camel $inp.Name }} = item.At({{ $index }}).{{ itemFunc $inp.ABIType }}
			{{ end -}}
		{{ end -}}
		return x
	}

	{{ range $index, $inp := .Inputs -}}
		{{ if gt (len $inp.Components) 0  -}}
			{{ template "struct" tstruct $inp.Name $inp.Components -}}
		{{ end -}}
	{{ end -}}
{{ end -}}

{{ define "list" -}}
	{{ if .Nested -}}
		{{ .Input.Name }}Item{{ .Index }} := {{ .Input.Name }}Item{{ sub .Index 1 }}.At(i{{ sub .Index 1 }})
	{{ else -}}
		{{ .Input.Name }}Item{{ .Index }} := item.At({{ .ItemIndex }})
	{{ end -}}
	{{ .Input.Name }}{{ .Index }} := make({{ .Dim }}{{ camel .Input.Name }}, {{ .Input.Name }}Item{{ .Index }}.Len())
	{{ if .HasNext -}}
		for i{{ .Index }} := 0; i{{ .Index }} < {{ .Input.Name }}Item{{ .Index }}.Len(); i{{ .Index }}++ {
			{{ template "list" .Next -}}
			{{ .Input.Name}}{{ .Index }}[i{{ .Index }}] = {{ .Input.Name }}{{ add .Index 1}}
		}
	{{ else -}}
		for i{{ .Index }} := 0; i{{ .Index }} < {{ .Input.Name }}Item{{ .Index }}.Len(); i{{ .Index }}++ {
			{{ if eq .Type.Elem.Kind 2 -}}
				{{ .Input.Name}}{{ .Index }}[i{{ .Index }}] = New{{ camel .Input.Name }}({{ .Input.Name }}Item{{ .Index }}.At(i{{ .Index}}))
			{{ else -}}
				{{ .Input.Name}}{{ .Index }}[i{{ .Index }}] = {{ .Input.Name }}Item{{ .Index }}.{{ itemFunc .Type }}
			{{ end -}}
		}
	{{ end -}}
{{ end -}}

{{- define "event" -}}
	var {{ camel .Name }}Event = abi.Event{
		Name: "{{ .Name }}",
		Inputs: []abi.Input{
			{{ range .Inputs -}}
			{{ template "input" . }}
			{{ end }}
		},
	}

	{{ template "struct" tstruct .Name .Inputs -}}

	func Match{{ camel .Name }}(l abi.Log) ({{ camel .Name}}, bool) {
		it, ok := abi.Match(l, {{ camel .Name }}Event)
		if !ok {
			return {{ camel .Name }}{}, false
		}
		return New{{ camel .Name}}(it), true
	}
{{ end -}}
