// Code generated by "genabi"; DO NOT EDIT.
package example

import (
	"github.com/indexsupply/x/abi"
	"math/big"
)

var TransferEvent = abi.Event{
	Name:          "transfer",
	Signature:     "transfer(address,address,uint256,(address,bytes32,bytes,(uint8,uint8))[][])",
	SignatureHash: [32]byte{0xd1, 0x8f, 0xaf, 0x79, 0x18, 0x71, 0xf6, 0x8e, 0xf, 0xa4, 0xd1, 0xfa, 0xca, 0x22, 0xed, 0x4b, 0xee, 0x53, 0xd9, 0xd7, 0x89, 0x7b, 0x8e, 0x77, 0x3f, 0xf6, 0x16, 0xff, 0xfd, 0xce, 0xd2, 0xbe},
	Inputs: []abi.Input{
		abi.Input{
			Indexed: true,
			Name:    "from",
			Type:    "address",
		},
		abi.Input{
			Indexed: true,
			Name:    "to",
			Type:    "address",
		},
		abi.Input{
			Indexed: true,
			Name:    "id",
			Type:    "uint256",
		},
		abi.Input{
			Name: "details",
			Type: "tuple[][]",
			Components: []abi.Input{
				abi.Input{
					Name: "other",
					Type: "address",
				},
				abi.Input{
					Name: "key",
					Type: "bytes32",
				},
				abi.Input{
					Name: "value",
					Type: "bytes",
				},
				abi.Input{
					Name: "geo",
					Type: "tuple",
					Components: []abi.Input{
						abi.Input{
							Name: "x",
							Type: "uint8",
						},
						abi.Input{
							Name: "y",
							Type: "uint8",
						},
					},
				},
			},
		},
	},
}

type Transfer struct {
	Item    abi.Item
	From    [20]byte
	To      [20]byte
	Id      *big.Int
	Details [][]Details
}

func NewTransfer(item abi.Item) Transfer {
	x := Transfer{}
	x.From = item.At(0).Address()
	x.To = item.At(1).Address()
	x.Id = item.At(2).BigInt()
	detailsItem0 := item.At(3)
	details0 := make([][]Details, detailsItem0.Len())
	for i0 := 0; i0 < detailsItem0.Len(); i0++ {
		detailsItem1 := detailsItem0.At(i0)
		details1 := make([]Details, detailsItem1.Len())
		for i1 := 0; i1 < detailsItem1.Len(); i1++ {
			details1[i1] = NewDetails(detailsItem1.At(i1))
		}
		details0[i0] = details1
	}
	x.Details = details0
	return x
}

type Details struct {
	Item  abi.Item
	Other [20]byte
	Key   [32]byte
	Value []byte
	Geo   Geo
}

func NewDetails(item abi.Item) Details {
	x := Details{}
	x.Other = item.At(0).Address()
	x.Key = item.At(1).Bytes32()
	x.Value = item.At(2).Bytes()
	x.Geo = NewGeo(item.At(3))
	return x
}

type Geo struct {
	Item abi.Item
	X    uint8
	Y    uint8
}

func NewGeo(item abi.Item) Geo {
	x := Geo{}
	x.X = item.At(0).Uint8()
	x.Y = item.At(1).Uint8()
	return x
}

func MatchTransfer(l abi.Log) (Transfer, bool) {
	it, ok := abi.Match(l, TransferEvent)
	if !ok {
		return Transfer{}, false
	}
	return NewTransfer(it), true
}
