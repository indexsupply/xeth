package eth

import (
	"bytes"
	"encoding/hex"
	"testing"

	"github.com/indexsupply/x/isxhash"
)

func check(t *testing.T, err error) {
	t.Helper()
	if err != nil {
		t.Fatal(err)
	}
}

func h2b(s string) []byte {
	b, _ := hex.DecodeString(s)
	return b
}

func TestSigHash(t *testing.T) {
	cases := []struct {
		desc   string
		txrlp  string
		signer string
	}{
		{
			"legacy",
			"f86d6d850ba43b740083015f9094d8da6bf26964af9d7eed9e03e53415d37aa960458803782dace9d90000801ca09a611f7abaa0e44c7e73c8926bbcb8c87bcd5023ce99fbbf5dff47b4ab52abcca00d5a9db90ea7dfebc428ae434ca81b215c83862e65d937315c308a520b58a3ff",
			"1Db3439a222C519ab44bb1144fC28167b4Fa6EE6",
		},
		{
			"EIP-1559",
			"02f8b301820457849502f9008505b8ae054e8304a95f9406af07097c9eeb7fd685c692751d5c66db49c21580b8443b4da69f000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa960450000000000000000000000000000000000000000000059c074db7dfbf18cc000c001a02dbeeba1debbc75c5b881a75543f9a89d1b14ad158d93ad21d3f1ff79e847d86a030f4e69fd7444659b6639581dbdc790ce28f8d8e73364f19cee895edc532a19a",
			"d8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
		},
		{
			"EIP-2930",
			"01f9039f018218bf85105e34df0083048a949410a0847c2d170008ddca7c3a688124f49363003280b902e4c11695480000000000000000000000004b274e4a9af31c20ed4151769a88ffe63d9439960000000000000000000000008510211a852f0c5994051dd85eaef73112a82eb5000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000bad4de000000000000000000000000607816a600000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000001146aa2600000000000000000000000000000000000000000000000000000000000001bc9b000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000482579f93dc13e6b434e38b5a0447ca543d88a4600000000000000000000000000000000000000000000000000000000000000c42df546f40000000000000000000000004b274e4a9af31c20ed4151769a88ffe63d943996000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000007d93f93d41604572119e4be7757a7a4a43705f080000000000000000000000000000000000000000000000003782dace9d90000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000082b5a61569b5898ac347c82a594c86699f1981aa88ca46a6a00b8e4f27b3d17bdf3714e7c0ca6a8023b37cca556602fce7dc7daac3fcee1ab04bbb3b94c10dec301cc57266db6567aa073efaa1fa6669bdc6f0877b0aeab4e33d18cb08b8877f08931abf427f11bade042177db48ca956feb114d6f5d56d1f5889047189562ec545e1c000000000000000000000000000000000000000000000000000000000000f84ff7946856ccf24beb7ed77f1f24eee5742f7ece5557e2e1a00000000000000000000000000000000000000000000000000000000000000001d694b1dd690cc9af7bb1a906a9b5a94f94191cc553cec080a0d52f3dbcad3530e73fcef6f4a75329b569a8903bf6d8109a960901f251a37af3a00ecf570e0c0ffa6efdc6e6e49be764b6a1a77e47de7bb99e167544ffbbcd65bc",
			"1cED2cef30d40Bb3617F8d455071b69F3B12D06f",
		},
		{
			"base goerli",
			"02f87483014a33038459682f008459682f3c82520894aed9dd4880c925015c9b00d97251d0ba32aebced87c1252eed4aff2380c080a0b1daf1a63000d9fa8b7cdad1156d9c132a62bf24d032c1a74f59f27c4b6be501a00350f28b0035d0312ccb90484dad7f8c2b822d28074177c2b3b58efa40e8ba4c",
			"2ce7dd6aad4b2ca4b2fc9289efa1185b86d09477",
		},
		{
			"EIP-155",
			"f8ac838e36778509786807dc8305573094dac17f958d2ee523a2206206994597c13d831ec780b844a9059cbb000000000000000000000000c72ff9f75dd210cab6b7ca730f7b500a5d95419b0000000000000000000000000000000000000000000000000000000167b6cac025a003a1333e3d58cb579abee29c4a9bffb484b3c0b28e42188d022b02a8049ff4829f67dfbfa2e52dcaec7759e441010bbb7491f329b99ee5c6c47c3cad80e62e1b",
			"46340b20830761efd32832A74d7169B29FEB9758",
		},
	}
	for _, tc := range cases {
		tx := Tx{}
		tx.UnmarshalRLP(h2b(tc.txrlp))
		signer, err := tx.Signer()
		check(t, err)
		if !bytes.Equal(signer, h2b(tc.signer)) {
			t.Errorf("%s %.4x\nwant: %s\ngot:  %x", tc.desc, isxhash.Keccak(h2b(tc.txrlp)), tc.signer, signer)
		}
	}
}
