{{ define "package" }}
// Code generated by "genabi"; DO NOT EDIT.
package {{ . }}
{{ end }}

{{ define "imports" }}
import (
	{{ range . -}}
	"{{ . }}"
	{{ end -}}
)
{{ end }}

{{ define "struct" -}}
	type {{camel .Name }} struct {
		{{ range .Inputs -}}
			{{ camel .Name }} {{ goType . }}
		{{ end -}}
	}
	func New{{ camel .Name }}(item abi.Item) {{ camel .Name }} {
		x := {{ camel .Name }}{}
		{{ range $index, $inp := (unindexed .Inputs) -}}
			{{ if isTuple $inp -}}
				x.{{ camel $inp.Name }} = New{{ camel $inp.Name }}(item.At({{ $index }}))
			{{ else if isArray $inp -}}
				{{ template "list" listHelper $index $inp -}}
				x.{{ camel $inp.Name }} = {{ $inp.Name }}0
			{{ else -}}
				x.{{ camel $inp.Name }} = item.At({{ $index }}).{{ itemFunc $inp }}
			{{ end -}}
		{{ end -}}
		return x
	}

	{{ range $index, $inp := .Inputs -}}
		{{ if gt (len $inp.Components) 0  -}}
			{{ template "struct" structHelper $inp.Name $inp.Components -}}
		{{ end -}}
	{{ end -}}
{{ end -}}

{{ define "list" -}}
	{{ if .Nested -}}
		{{ .Input.Name }}Item{{ .Index }} := {{ .Input.Name }}Item{{ sub .Index 1 }}.At(i{{ sub .Index 1 }})
	{{ else -}}
		{{ .Input.Name }}Item{{ .Index }} := item.At({{ .ItemIndex }})
	{{ end -}}
	{{ if .FixedLength -}}
		{{ .Input.Name }}{{ .Index }} := {{ .MakeArg }}{}
	{{ else -}}
		{{ .Input.Name }}{{ .Index }} := make({{ .MakeArg }}, {{ .Input.Name }}Item{{ .Index }}.Len())
	{{ end -}}
	{{ if .HasNext -}}
		for i{{ .Index }} := 0; i{{ .Index }} < {{ .Input.Name }}Item{{ .Index }}.Len(); i{{ .Index }}++ {
			{{ template "list" .Next -}}
			{{ .Input.Name}}{{ .Index }}[i{{ .Index }}] = {{ .Input.Name }}{{ add .Index 1}}
		}
	{{ else -}}
		for i{{ .Index }} := 0; i{{ .Index }} < {{ .Input.Name }}Item{{ .Index }}.Len(); i{{ .Index }}++ {
			{{ if hasTuple .Input -}}
				{{ .Input.Name}}{{ .Index }}[i{{ .Index }}] = New{{ camel .Input.Name }}({{ .Input.Name }}Item{{ .Index }}.At(i{{ .Index}}))
			{{ else -}}
				{{ .Input.Name}}{{ .Index }}[i{{ .Index }}] = {{ .Input.Name }}Item{{ .Index }}.{{ itemFunc .Input }}
			{{ end -}}
		}
	{{ end -}}
{{ end -}}

{{- define "event" -}}
	{{ template "struct" structHelper .Name .Inputs -}}

	// {{ .Signature }}
	// {{ printf "%x" .SignatureHash }}
	var (
		{{ camel .Name }}Signature = {{ .SigHashLiteral }}
		{{ camel .Name }}Schema = schema.Parse("{{ .SchemaSignature }}")
	)

	func Match{{ camel .Name }}(l abi.Log) ({{ camel .Name}}, bool) {
		if {{ camel .Name }}Signature != l.Topics[0] {
			return {{ camel .Name }}{}, false
		}
		{{ if gt (len (unindexed .Inputs)) 0 -}}
			item := abi.Decode(l.Data, {{camel .Name }}Schema)
			res := New{{ camel .Name}}(item)
		{{ else -}}
			res := {{ camel .Name}}{}
		{{ end -}}
		{{ range $index, $inp := (indexed .Inputs) -}}
			res.{{ camel $inp.Name }} = abi.Bytes(l.Topics[{{ add $index  1 }}][:]).{{ itemFunc $inp }}
		{{ end -}}
		return res, true
	}
{{ end -}}
